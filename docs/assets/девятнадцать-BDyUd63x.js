import"./modulepreload-polyfill-B5Qt9EMX.js";import{g as r}from"./client-misc-1LRynplM.js";/* empty css              */import{P as v}from"./path-shape-BgXUztkR.js";import{s as T,b as I}from"./utility-2TZy30Cu.js";import{m as L}from"./misc-CLGTS8fC.js";const p=r("go",HTMLButtonElement),w=r("source",HTMLTextAreaElement),M=r("result",HTMLElement);w.addEventListener("input",()=>p.disabled=!1);class m{static#t=r("error",HTMLDivElement);static display(e){this.#t.innerText=e}static displayError(e){e instanceof b?this.#t.innerHTML=`Unable to access <code>support.input(${e.requestedIndex})</code>.  Only ${s.length} input sliders currently exist.  <button onclick="addMoreInputs(this,${e.requestedIndex+1})">Add More</button>`:this.display(e.message)}static clear(){this.display("")}}const E=T("[data-sample]",SVGSVGElement).map(t=>{const e=L.assertClass(t.firstElementChild,SVGPathElement);return{svg:t,path:e}}),s=[];class b extends Error{constructor(e){super(`Unable to access support.input(${e}).  Only ${s.length} input sliders currently exist.`),this.requestedIndex=e}}const S={input(t){if(!Number.isSafeInteger(t)||t<0)throw new RangeError(`invalid ${t}`);if(t>=s.length)throw new b(t);return s[t]}},$=r("inputs",HTMLDivElement);function d(){p.disabled=!1;const t=s.length,e=.5,a=`<div>
      <input type="range" min="0" max="1" value="${e}" step="0.00001" oninput="copyNewInput(this, ${t})" />
      <code>support.input(${t})</code> =
      <span>${e}</span>
    </div>`;$.insertAdjacentHTML("beforeend",a),s.push(e)}window.addMoreInputs=(t,e)=>{for(t.disabled=!0;s.length<e;)d()};I("#inputsGroup button",HTMLButtonElement).addEventListener("click",()=>{d()});d();d();{const t=r("segmentCountInput",HTMLInputElement),e=()=>{m.clear();const h=`"use strict";
`+w.value+`
return { x, y };`;let l;try{l=new Function("t /* A value between 0 and 1, inclusive. */","support",h)}catch(n){if(n instanceof SyntaxError){m.displayError(n);return}else throw n}const x=n=>{const o=l(n,S);if(!(Number.isFinite(o.x)&&Number.isFinite(o.y)))throw new Error(`Invalid result.  Expected {x,y} where x and y are both finite numbers.  Found: ${JSON.stringify(o)} when t=${n}.`);return o};let y;try{y=v.parametric(x,t.valueAsNumber).rawPath}catch(n){if(n instanceof Error){m.displayError(n);return}else throw n}E.forEach(({path:n})=>n.setAttribute("d",y)),M.innerText=E[0].path.outerHTML,E.forEach(({svg:n,path:o})=>{const c=o.getBBox(),i=n.viewBox.baseVal;i.x=c.x,i.y=c.y,i.width=c.width,i.height=c.height,n.style.setProperty("--recommended-width",(Math.max(i.width,i.height)/100).toString())})};let a=!1;const u=()=>{p.disabled=!0,a||(a=!0,requestAnimationFrame(()=>{a=!1,e()}))};p.addEventListener("click",u);const g=r("segmentCountSpan",HTMLSpanElement),f=()=>{g.innerText=t.value};f(),t.addEventListener("input",()=>{f(),u()}),window.copyNewInput=(h,l)=>{s[l]=h.valueAsNumber,u()},u()}
