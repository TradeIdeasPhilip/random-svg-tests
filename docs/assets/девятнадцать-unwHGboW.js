import"./modulepreload-polyfill-B5Qt9EMX.js";import{g as l}from"./client-misc-1LRynplM.js";/* empty css              */import{P as S}from"./path-shape-BgXUztkR.js";import{b as x,s as b}from"./utility-2TZy30Cu.js";import{m}from"./misc-CLGTS8fC.js";const g=l("go",HTMLButtonElement),y=l("source",HTMLTextAreaElement),D=l("result",HTMLElement);y.addEventListener("input",()=>g.disabled=!1);class w{static#t=l("error",HTMLDivElement);static display(t){this.#t.innerText=t}static displayError(t){t instanceof T?this.#t.innerHTML=`Unable to access <code>support.input(${t.requestedIndex})</code>.  Only ${u.length} input sliders currently exist.  <button onclick="addMoreInputs(this,${t.requestedIndex+1})">Add More</button>`:this.display(t.message)}static clear(){this.display("")}}class a{#t;get svgElement(){return this.#t}#e;get pathElement(){return this.#e}constructor(t){this.#t=x(t,SVGSVGElement),this.#e=m.assertClass(this.#t.firstElementChild,SVGPathElement),a.all.add(this)}static all=new Set;#n=NaN;get recommendedWidth(){return this.#n}#s(){const t=this.#e.getBBox(),n=this.#t.viewBox.baseVal;n.x=t.x,n.y=t.y,n.width=t.width,n.height=t.height,this.#n=Math.max(n.width,n.height)/100,this.#t.style.setProperty("--recommended-width",this.#n.toString())}setD(t){this.#e.setAttribute("d",t),this.#s()}static setD(t){this.all.forEach(n=>n.setD(t))}static getOuterHTML(){return m.pickAny(a.all).#e.outerHTML}deAnimate(){this.#e.getAnimations().forEach(t=>t.cancel())}}new a("#filledSample");new a("#outlineSample");class L extends a{constructor(){super("#chasingPathsSample")}setD(t){super.setD(t);const n=this.pathElement,o=1500,s=Date.now()/o%1;this.deAnimate();const c=n.getTotalLength();n.style.strokeDasharray=`0 ${c} ${c} 0`,n.animate([{strokeDashoffset:0},{strokeDashoffset:-2*c}],{iterations:1/0,duration:o,iterationStart:s})}}new L;class M extends a{constructor(){super("#dancingAntsSample")}setD(t){super.setD(t);const n=this.pathElement,o=250;this.deAnimate();const s=n.getTotalLength(),c=Date.now()/o%1,h=4*this.recommendedWidth,r=h*10<s?s/Math.round(s/h):h;n.style.strokeDasharray=`0 ${r}`,n.animate([{strokeDashoffset:0},{strokeDashoffset:-r}],{iterations:1/0,duration:o,iterationStart:c})}}new M;class A extends a{constructor(){super("#tauFollowingPathSample")}setD(t){super.setD(t),this.svgElement.style.setProperty("--css-path",S.cssifyPath(t))}}new A;new a("#textPathSample");const u=[];class T extends Error{constructor(t){super(`Unable to access support.input(${t}).  Only ${u.length} input sliders currently exist.`),this.requestedIndex=t}}const I={input(e){if(!Number.isSafeInteger(e)||e<0)throw new RangeError(`invalid ${e}`);if(e>=u.length)throw new T(e);return u[e]}},H=l("inputs",HTMLDivElement);function f(){g.disabled=!1;const e=u.length,t=.5,n=`<div class="has-slider">
      <input type="range" min="0" max="1" value="${t}" step="0.00001" oninput="copyNewInput(this, ${e})" />
      <code>support.input(${e})</code> =
      <span>${t.toString().padEnd(7,"0")}</span>
    </div>`;H.insertAdjacentHTML("beforeend",n),u.push(t)}window.addMoreInputs=(e,t)=>{for(e.disabled=!0;u.length<t;)f()};x("#inputsGroup button",HTMLButtonElement).addEventListener("click",()=>{f()});f();f();{const e=l("segmentCountInput",HTMLInputElement),t=l("inputsGroup",HTMLDivElement),n=()=>{w.clear();const r=`"use strict";
`+y.value+`
return { x, y };`;let p;try{p=new Function("t /* A value between 0 and 1, inclusive. */","support",r)}catch(i){if(i instanceof SyntaxError){w.displayError(i);return}else throw i}const d=i=>{const E=p(i,I);if(!(Number.isFinite(E.x)&&Number.isFinite(E.y)))throw new Error(`Invalid result.  Expected {x,y} where x and y are both finite numbers.  Found: ${JSON.stringify(E)} when t=${i}.`);return E};let v;try{v=S.parametric(d,e.valueAsNumber).rawPath}catch(i){if(i instanceof Error){w.displayError(i);return}else throw i}a.setD(v),D.innerText=a.getOuterHTML()};let o=!1;const s=()=>{g.disabled=!0,o||(o=!0,requestAnimationFrame(()=>{o=!1,n()}))};g.addEventListener("click",s);const c=l("segmentCountSpan",HTMLSpanElement),h=()=>{c.innerText=e.value.padStart(3,m.FIGURE_SPACE)};h(),e.addEventListener("input",()=>{h(),s()}),window.copyNewInput=(r,p)=>{u[p]=r.valueAsNumber;const d=m.assertClass(r.parentElement?.lastElementChild,HTMLSpanElement);d.innerText=r.valueAsNumber.toFixed(5),s()},b("button.show-this",HTMLButtonElement).forEach(r=>{const p=m.assertClass(r.parentElement?.nextElementSibling,HTMLPreElement);r.addEventListener("click",()=>{const d=p.innerText;y.value=d,s(),t.scrollIntoView({behavior:"smooth"})})}),s()}
