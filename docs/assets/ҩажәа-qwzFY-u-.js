import"./modulepreload-polyfill-B5Qt9EMX.js";import{c as F}from"./client-misc-ZHNZ3-cL.js";/* empty css              */import{P as k,Q as _}from"./path-shape-7xuS1yUd.js";import{d as E,s as p0,e as m0,m as Q0,R as g0}from"./utility-By36BYLf.js";import{m as S}from"./misc-wGF4FraP.js";import{l as v0}from"./math-to-path-BjxPr1Cw.js";import{f as M0,c as y0}from"./hershey-fonts-B3DM-v4L.js";import"./letters-base-CVek-Niy.js";var $,t0;function j(){if(t0)return $;t0=1;var a=function(e,n){return[e[0]+n[0],e[1]+n[1]]},s=function(e,n){return[e[0]-n[0],e[1]-n[1]]},i=function(e,n){return[e[0]*n[0]-e[1]*n[1],e[0]*n[1]+e[1]*n[0]]},t=function(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1])};return $={add:a,subtract:s,multiply:i,magnitude:t},$}var D,e0;function z(){if(e0)return D;e0=1;var a=j(),s={},i=function(n,o){var r=-2*Math.PI*(n/o);return s[o]=s[o]||{},s[o][n]=s[o][n]||[Math.cos(r),Math.sin(r)],s[o][n]},t=function(n){var o=n.map(a.magnitude);return o.slice(0,o.length/2)},e=function(n,o){var r=o/n.length,d=n.slice(0,n.length/2);return d.map(function(h,v){return v*r})};return D={fftMag:t,fftFreq:e,exponent:i},D}var p={},n0;function x0(){if(n0)return p;n0=1;var a=32;p.INT_BITS=a,p.INT_MAX=2147483647,p.INT_MIN=-1<<a-1,p.sign=function(t){return(t>0)-(t<0)},p.abs=function(t){var e=t>>a-1;return(t^e)-e},p.min=function(t,e){return e^(t^e)&-(t<e)},p.max=function(t,e){return t^(t^e)&-(t<e)},p.isPow2=function(t){return!(t&t-1)&&!!t},p.log2=function(t){var e,n;return e=(t>65535)<<4,t>>>=e,n=(t>255)<<3,t>>>=n,e|=n,n=(t>15)<<2,t>>>=n,e|=n,n=(t>3)<<1,t>>>=n,e|=n,e|t>>1},p.log10=function(t){return t>=1e9?9:t>=1e8?8:t>=1e7?7:t>=1e6?6:t>=1e5?5:t>=1e4?4:t>=1e3?3:t>=100?2:t>=10?1:0},p.popCount=function(t){return t=t-(t>>>1&1431655765),t=(t&858993459)+(t>>>2&858993459),(t+(t>>>4)&252645135)*16843009>>>24};function s(t){var e=32;return t&=-t,t&&e--,t&65535&&(e-=16),t&16711935&&(e-=8),t&252645135&&(e-=4),t&858993459&&(e-=2),t&1431655765&&(e-=1),e}p.countTrailingZeros=s,p.nextPow2=function(t){return t+=t===0,--t,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t+1},p.prevPow2=function(t){return t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t-(t>>>1)},p.parity=function(t){return t^=t>>>16,t^=t>>>8,t^=t>>>4,t&=15,27030>>>t&1};var i=new Array(256);return function(t){for(var e=0;e<256;++e){var n=e,o=e,r=7;for(n>>>=1;n;n>>>=1)o<<=1,o|=n&1,--r;t[e]=o<<r&255}}(i),p.reverse=function(t){return i[t&255]<<24|i[t>>>8&255]<<16|i[t>>>16&255]<<8|i[t>>>24&255]},p.interleave2=function(t,e){return t&=65535,t=(t|t<<8)&16711935,t=(t|t<<4)&252645135,t=(t|t<<2)&858993459,t=(t|t<<1)&1431655765,e&=65535,e=(e|e<<8)&16711935,e=(e|e<<4)&252645135,e=(e|e<<2)&858993459,e=(e|e<<1)&1431655765,t|e<<1},p.deinterleave2=function(t,e){return t=t>>>e&1431655765,t=(t|t>>>1)&858993459,t=(t|t>>>2)&252645135,t=(t|t>>>4)&16711935,t=(t|t>>>16)&65535,t<<16>>16},p.interleave3=function(t,e,n){return t&=1023,t=(t|t<<16)&4278190335,t=(t|t<<8)&251719695,t=(t|t<<4)&3272356035,t=(t|t<<2)&1227133513,e&=1023,e=(e|e<<16)&4278190335,e=(e|e<<8)&251719695,e=(e|e<<4)&3272356035,e=(e|e<<2)&1227133513,t|=e<<1,n&=1023,n=(n|n<<16)&4278190335,n=(n|n<<8)&251719695,n=(n|n<<4)&3272356035,n=(n|n<<2)&1227133513,t|n<<2},p.deinterleave3=function(t,e){return t=t>>>e&1227133513,t=(t|t>>>2)&3272356035,t=(t|t>>>4)&251719695,t=(t|t>>>8)&4278190335,t=(t|t>>>16)&1023,t<<22>>22},p.nextCombination=function(t){var e=t|t-1;return e+1|(~e&-~e)-1>>>s(t)+1},p}var X,s0;function K(){if(s0)return X;s0=1;var a=j(),s=z(),i=x0();return X={fft:function t(e){var n=[],o=e.length;if(o==1)return Array.isArray(e[0])?[[e[0][0],e[0][1]]]:[[e[0],0]];for(var r=t(e.filter(m)),d=t(e.filter(I)),h=0;h<o/2;h++){var v=r[h],q=a.multiply(s.exponent(h,o),d[h]);n[h]=a.add(v,q),n[h+o/2]=a.subtract(v,q)}function m(A,l){return l%2==0}function I(A,l){return l%2==1}return n},fftInPlace:function(t){for(var e=t.length,n=i.countTrailingZeros(e),o=0;o<e;o++){var r=i.reverse(o)>>>i.INT_BITS-n;if(r>o){var d=[t[o],0];t[o]=t[r],t[r]=d}else t[r]=[t[r],0]}for(var h=2;h<=e;h+=h)for(var v=0;v<h/2;v++)for(var q=s.exponent(v,h),m=0;m<e/h;m++){var I=a.multiply(q,t[m*h+v+h/2]);t[m*h+v+h/2]=a.subtract(t[m*h+v],I),t[m*h+v]=a.add(t[m*h+v],I)}}},X}var Y,r0;function w0(){if(r0)return Y;r0=1;var a=K().fft;return Y={ifft:function(i){for(var t=[],e=0;e<i.length;e++)t[e]=[i[e][1],i[e][0]];for(var n=a(t),o=[],r=0;r<n.length;r++)o[r]=[n[r][1]/n.length,n[r][0]/n.length];return o}},Y}var Z,a0;function c0(){if(a0)return Z;a0=1;var a=j(),s=z(),i=function(t){for(var e=[],n=t.length,o=0;o<n;o++){e[o]=[0,0];for(var r=0;r<n;r++){var d=s.exponent(o*r,n),h;Array.isArray(t[r])?h=a.multiply(t[r],d):h=a.multiply([t[r],0],d),e[o]=a.add(e[o],h)}}return e};return Z=i,Z}var J,o0;function E0(){if(o0)return J;o0=1;var a=c0();function s(i){for(var t=[],e=0;e<i.length;e++)t[e]=[i[e][1],i[e][0]];for(var n=a(t),o=[],r=0;r<n.length;r++)o[r]=[n[r][1]/n.length,n[r][0]/n.length];return o}return J=s,J}var W,i0;function b0(){return i0||(i0=1,W={fft:K().fft,ifft:w0().ifft,fftInPlace:K().fftInPlace,util:z(),dft:c0(),idft:E0()}),W}var F0=b0();function T0(a,s=1024){if(Math.log2(s)%1!==0)throw new Error("numSamples must be a power of 2");const i=[];for(let n=0;n<s;n++){const o=n/s,r=a(o);i.push([r.x,r.y])}const t=F0.fft(i),e=[];for(let n=0;n<s;n++){const[o,r]=t[n],d=Math.sqrt(o*o+r*r)/s,h=Math.atan2(r,o),v=n<=s/2?n:n-s;e.push({frequency:v,amplitude:d,phase:h})}return e.sort((n,o)=>o.amplitude-n.amplitude),e}function I0(a,s){return i=>{let t=0,e=0;for(let n=0;n<Math.min(s,a.length);n++){const{frequency:o,amplitude:r,phase:d}=a[n],h=2*Math.PI*o*i+d;t+=r*Math.cos(h),e+=r*Math.sin(h)}return{x:t,y:e}}}function A0(a){let s=0;a.forEach(n=>s+=n.amplitude);const i=s/1e7,t=a.filter(n=>n.amplitude>i);let e=0;return t.forEach(n=>e+=n.amplitude),t}const h0=200,G=F.getById("go",HTMLButtonElement),B=F.getById("source",HTMLTextAreaElement),L=F.getById("sampleCode",HTMLSelectElement),H=[{name:"Custom",code:""},{name:"Polygons and Stars",code:`const numberOfPoints = 5;
/**
 * 0 to make a polygon.
 * 1 to make a star, if numberOfPoints is odd and at least 5.
 * 2 to make a different star, if numberOfPoints is odd and at least 7.
 */ 
const skip = 1;
const rotate = 2 * Math.PI / numberOfPoints * (1 + skip);

/**
 * Create a random number generator.
 * Change the seed to get different values.
 * random() will return a number between 0 and 1.
 */
const random = support.random("My seed 2025");

/**
 * How much effect does the random number generator have.
 * Far left → no randomness at all.
 */
const amplitude = support.input(0);

function jiggle() {
  return (random()-0.5) * amplitude;
}

const corners = [];
for (let i = 0; i < numberOfPoints; i++) {
  const θ = i * rotate;
  corners.push({x: Math.cos(θ) + jiggle(), y: Math.sin(θ) + jiggle()});
}
//console.log(corners);
const tSplitter = support.makeTSplitterA(0, corners.length, 0);
function f(t) {
  const segment = tSplitter(t);
  return support.lerpPoints(corners[segment.index], corners[(segment.index+1)%corners.length], segment.t);
}`},{name:"Square",default:!0,code:`const corners = [{x: -0.5, y: -0.5}, {x: 0.5, y: -0.5}, {x: 0.5, y: 0.5}, {x: -0.5, y: 0.5} ];
const tSplitter = support.makeTSplitterA(0, corners.length, 0);
function f(t) {
  const segment = tSplitter(t);
  return support.lerpPoints(corners[segment.index], corners[(segment.index+1)%corners.length], segment.t);
}`},{name:"Square with Easing",code:`const corners = [{x: -0.5, y: -0.5}, {x: 0.5, y: -0.5}, {x: 0.5, y: 0.5}, {x: -0.5, y: 0.5} ];
const tSplitter = support.makeTSplitterA(0, corners.length, 0);
function f(t) {
  const segment = tSplitter(t);
  return support.lerpPoints(corners[segment.index], corners[(segment.index+1)%corners.length], support.ease(segment.t));
}`},{name:"SVG Path",code:`// Also consider support.samples.hilbert[0] ... support.samples.hilbert[3]
//   and support.samples.peanocurve[0] ... support.samples.peanocurve[2] 
support.referencePath.d = support.samples.likeShareAndSubscribe;
const length = support.referencePath.length;
console.log({length});
function f(t) {
  // Copy the path as is.
  return support.referencePath.getPoint(t * length);
}`},{name:"Simple Ellipse",code:`// The height can be anything convenient to you.
// This software will automatically zoom and pan to show off your work.
const height = 1;
// Use the first slider to change the width of the ellipse.
const width = height * support.input(0) * 2;
function f(t) {
// Use the second slider to change the starting point on the ellipse.
// This doesn't matter in a static ellipse, but it can be important in some animations and other special cases.
const angle = (t + support.input(1)) * 2 * Math.PI;
const x = width * Math.cos(angle);
const y = height * Math.sin(angle);
return {x, y};}`},{name:"Circle with Wavy Edge",code:`const height = 1;
const width = height;
function f(t) {
const angle = t * 2 * Math.PI;
const adjustmentAngle = angle * 8;
const adjustmentFactor = Math.sin(adjustmentAngle)/10+1;
const x = width * Math.cos(angle) * adjustmentFactor;
const y = height * Math.sin(angle) * adjustmentFactor;
return {x, y};}`},{name:"Lissajous Curves",code:`const a = 1; // Amplitude in x-direction
const b = 1; // Amplitude in y-direction
const freqX = 3; // Frequency in x-direction
const freqY = 2; // Frequency in y-direction
const phase = Math.PI / 2; // Phase difference
function f(t) {
const angle = t * 2 * Math.PI;
const x = a * Math.sin(freqX * angle + phase);
const y = b * Math.sin(freqY * angle);
return {x, y};}`},{name:"Hypocycloid / Astroid",code:`const R = 1; // Radius of the large circle
const r = R / 4; // Radius of the small circle (astroid case)
function f(t) {
const angle = t * 2 * Math.PI;
const x = (R - r) * Math.cos(angle) + r * Math.cos((R - r) / r * angle);
const y = (R - r) * Math.sin(angle) - r * Math.sin((R - r) / r * angle);
return {x, y};}`},{name:"Bell Curve",code:`// Number of standard deviations in each direction:
const right = support.input(0) * 5;
const left = - right;
const width = right - left;
const height = support.input(1) * 4 + 1;
function f(t) {
const x = t * width + left;
// Negate this.
// This program works with normal graphics notation where lower values of y are higher on the display.
// Normal algebra-class graphs show lower values of y lower on the screen.
const y = - height * Math.exp(-x*x);
return {x, y};}`},{name:"Archimedean Spiral with Oscillation",code:`const scale = 1; // Overall scale of the spiral
const turns = 3; // Number of full rotations
const waveFreq = 10; // Frequency of the oscillation
const waveAmp = 0.1; // Amplitude of the oscillation
function f(t) {
const angle = t * 2 * Math.PI * turns;
const radius = scale * t; // Linear growth for Archimedean spiral
const wave = waveAmp * Math.sin(t * 2 * Math.PI * waveFreq);
const x = radius * Math.cos(angle) * (1 + wave);
const y = radius * Math.sin(angle) * (1 + wave);
return {x, y};}`},{name:"Heart Curve ♡",code:`function f(t) {
const angle = t * 2 * Math.PI;
const x = 16 * Math.pow(Math.sin(angle), 3);
const algebraClassY = (13 * Math.cos(angle) - 5 * Math.cos(2 * angle) - 2 * Math.cos(3 * angle) - Math.cos(4 * angle));
const y = - algebraClassY;
return {x, y};}`},{name:"Butterfly Curve",code:`const scale = 0.2;
function f(t) {
const angle = t * 24 * Math.PI * support.input(0); // More rotations for complexity
const e = Math.exp(1);
const x = scale * Math.sin(angle) * (e ** Math.cos(angle) - 2 * Math.cos(4 * angle) - Math.pow(Math.sin(angle / 12), 5));
const y = - scale * Math.cos(angle) * (e ** Math.cos(angle) - 2 * Math.cos(4 * angle) - Math.pow(Math.sin(angle / 12), 5));
return {x, y};}`},{name:"Hollow Star ☆",code:`const scale = 1; // Overall scale of the star
const points = 5; // Number of star points
const innerRadius = 0.4; // Radius of the inner points (controls star shape)
const roundness = 0.1; // Amplitude of the oscillation for rounding
function f(t) {
const angle = t * 2 * Math.PI; // Full circle
const starAngle = angle * points; // Angle scaled for 5 points
const radius = scale * (1 - innerRadius * (Math.cos(starAngle) + 1) / 2); // Base star shape
const rounding = roundness * Math.sin(starAngle); // Oscillation for rounding
const x = (radius + rounding) * Math.cos(angle);
const y = (radius + rounding) * Math.sin(angle);
return {x, y};}
// According to Wikipedia, if it's hollow inside, it's a star.
// If you can see the lines crossing each other, it's a pentagram.`},{name:"Rotating Ellipse",code:`const r1 = 0.5; // Short radius of the ellipse
const r2 = 1.0; // Long radius of the ellipse
const phase = support.input(0) * Math.PI; // First slider: Rotation angle in radians (0 to π)
function f(t) {
const angle = t * 2 * Math.PI; // Full circle

// Basic ellipse centered at the origin
const xEllipse = r1 * Math.cos(angle);
const yEllipse = r2 * Math.sin(angle);

// Rotate the ellipse by the phase angle
const x = xEllipse * Math.cos(phase) - yEllipse * Math.sin(phase);
const y = xEllipse * Math.sin(phase) + yEllipse * Math.cos(phase);
return {x, y};}
// I used this formula as a starting place for the rounded pentagram.`},{name:"Rounded Pentagram ⛤, Heptagram, etc.",code:`const r1 = 0.5 * support.input(0); // Short radius of the ellipse. Top slider will adjust it.
const r2 = 1.0; // Long radius of the ellipse
function f(t) {
const phase = Math.PI * t; // The reference ellipse will make one half complete rotation during the tracing process.
const numberOfTrips = support.input(1) * 10;  // Effective range is 0 to 10 
const angle = t * 2 * Math.PI * numberOfTrips; // Basic ellipse centered at the origin
const xEllipse = r1 * Math.cos(angle);
const yEllipse = r2 * Math.sin(angle);// Rotate the ellipse by the phase angle
const x = xEllipse * Math.cos(phase) - yEllipse * Math.sin(phase);
const y = xEllipse * Math.sin(phase) + yEllipse * Math.cos(phase);
return {x, y};}
// The top slider controls the amount of curvature in the output.
// The second slider controls the number of lobes.
// Try values like 0.05, 0.15, 0.25, …, 0.95 for closed shapes.`},{name:"Squaring the Circle",code:`// This will trace out the shape of a dog tag using epicycles.
// Use the first slider to choose how many circles to use in
// this approximation, from 1 to 20.

// I was originally trying to use epicycles to create a square.
// But I ran into some problems,
// so this a square where two of the sides bulge out some.

const numberOfCircles = 1 + 19 * support.input(0);
const circlesToConsider = Math.ceil(numberOfCircles);
const attenuation = numberOfCircles - Math.floor(numberOfCircles);
function f(t) {
let x = 0;
let y = 0;
for (let k = 0; k < circlesToConsider; k++) {
  const n = 2 * k + 1; // Odd frequencies: 1, 3, 5, ...
  const radius = (4 * Math.sqrt(2)) / (Math.PI * Math.PI * n * n);
  const phase = k % 2 === 0 ? -Math.PI / 4 : Math.PI / 4;
  const factor = (k === circlesToConsider - 1 && attenuation > 0) ? attenuation : 1;
  const baseAngle = t * 2 * Math.PI;
  x += factor * radius * Math.cos(n * baseAngle + phase);
  y += factor * radius * Math.sin(n * baseAngle + phase);
}
return {x, y};}`},{name:"A Better Square",code:`// Inspired by https://www.youtube.com/watch?v=t99CmgJAXbg
// Square Orbits Part 1: Moon Orbits

const R = 0.573; // Match our first circle's radius
const moonRadius = (7 / 45) * R;
function f(t) {
const planetAngle = t * 2 * Math.PI; // Frequency 1
const moonAngle = -3 * planetAngle; // Frequency 3, opposite direction
const planetX = R * Math.cos(planetAngle);
const planetY = R * Math.sin(planetAngle);
const moonX = moonRadius * Math.cos(moonAngle);
const moonY = moonRadius * Math.sin(moonAngle);
const x = (planetX + moonX) * 1.2;
const y = (planetY + moonY) * 1.2;
return {x, y};}`},{name:"Fourier square wave",code:`// Use the first slider to choose how many sine waves to use in
// this approximation, from 1 to 20.

const numberOfCircles = 1 + 19 * support.input(0);
const circlesToConsider = Math.ceil(numberOfCircles);
const attenuation = numberOfCircles - Math.floor(numberOfCircles);
function f(t) {
let ySum = 0;
for (let k = 0; k < circlesToConsider; k++) {
  const n = 2 * k + 1; // Odd frequencies: 1, 3, 5, ...
  const amplitude = (4 / Math.PI) / n;
  const factor = (k === circlesToConsider - 1 && attenuation > 0) ? attenuation : 1;
  const baseAngle = 2 * Math.PI * 2.5 * t + Math.PI / 2; // 2.5 cycles, shift for vertical center
  ySum += factor * amplitude * Math.sin(n * baseAngle);
}
const x = (t * 5) - 2.5; // Span x from -2.5 to 2.5
const y = ySum;
return {x, y};}`}];function l0(a,s){const i=a.getBBox(),t=s.viewBox.baseVal;t.x=i.x,t.y=i.y,t.width=i.width,t.height=i.height;const e=i.width/i.height,n=300,o=n*e;s.style.height=n+"px",s.style.width=o+"px";const r=Math.max(t.width,t.height)/100;return s.style.setProperty("--recommended-stroke-width",r.toString()),{recommendedStrokeWidth:r}}class u0{#e=document.createElementNS("http://www.w3.org/2000/svg","svg");#t=document.createElementNS("http://www.w3.org/2000/svg","path");constructor(){this.#e.style.width="0",this.#e.style.height="0",this.#e.appendChild(this.#t),document.body.appendChild(this.#e)}get d(){return this.#t.getAttribute("d")??""}set d(s){this.#t.style.d="",this.#t.style.d=k.cssifyPath(s);const i=this.#t.style.d!="";if(this.#t.style.d="",i)this.#t.setAttribute("d",s);else throw new Error("Invalid path")}get empty(){return this.d==""}clear(){this.d=""}get length(){return this.#t.getTotalLength()}getPoint(s){return this.#t.getPointAtLength(s)}}window.pathWrapper=new u0;class P0{static#e=new this;#t=F.getById("distanceVsT",SVGSVGElement);#n=E("circle[data-distance]",SVGCircleElement,this.#t);#r=E("path",SVGPathElement,this.#t);#s=E("circle[data-t]",SVGCircleElement);constructor(){new F.AnimationLoop(s=>{if(this.#n.style.display="none",this.#s.style.display="none",this.f){s%=5e3;const t=s/5e3,e=t*100;this.#n.style.offsetDistance=e+"%",this.#n.style.display="";const{x:n,y:o}=this.f(t);this.#s.cx.baseVal.value=n,this.#s.cy.baseVal.value=o,this.#s.style.display=""}})}f;update(s,i){this.#r.setAttribute("d",i),l0(this.#r,this.#t),this.f=s,this.#n.style.offsetPath=k.cssifyPath(i)}static update(s,i){this.#e.update(s,i)}}class S0{static#e=new this;#t=F.getById("requestedVsReconstructed",SVGSVGElement);#n;#r;#s=E("[data-using] [data-circles]",HTMLTableCellElement);#a=E("[data-using] [data-amplitude]",HTMLTableCellElement);#h=E("[data-adding] [data-circles]",HTMLTableCellElement);#o=E("[data-adding] [data-amplitude]",HTMLTableCellElement);#l=E("[data-available] [data-circles]",HTMLTableCellElement);#i=E("[data-available] [data-amplitude]",HTMLTableCellElement);constructor(){[this.#n,this.#r]=p0("path",SVGPathElement,2,2,this.#t)}#c;update(s,i){this.#c?.();const t=[];this.#c=()=>{t.forEach(l=>l.cancel())},this.#n.setAttribute("d",i),l0(this.#n,this.#t);const e=T0(s),n=A0(e);window.nonZeroTerms=n,window.originalTerms=e;let o=0;n.forEach(l=>o+=l.amplitude);const r=n.map(l=>({here:l.amplitude/o*100,before:NaN,after:NaN}));{let l=0,f=0;r.forEach((g,u,M)=>{g.before=l,l+=g.here;const y=M.length-u-1,x=M[y];x.after=f,f+=x.here})}const d=10;let h=0;const v=750,q=500,m=new Array;for(let l=d-1;l>=0&&h<r.length;l--){let f=0,g=0,u=h;const M=r[u].before;for(;f+=r[u].here,g++,u++,!(u>=r.length);)if(l>0){const c=r[u].after/l;if(f>c)break}const y=r[u-1].after,x=r.length-u;m.push({offset:NaN,startTime:NaN,endTime:NaN,usingCircles:h,usingAmplitude:M,addingCircles:g,addingAmplitude:f,availableAmplitude:y,availableCircles:x}),h+=g,m.push({offset:NaN,startTime:NaN,endTime:NaN,usingCircles:h,usingAmplitude:M+f,addingCircles:0,addingAmplitude:0,availableAmplitude:y,availableCircles:x})}let I=NaN;{let l=0;m.forEach(u=>{const M=u.addingCircles?q:v,y=l+M;u.startTime=l,u.endTime=y,l=y}),m.forEach(u=>{u.offset=u.startTime/l}),I=50/l;const g={...m.at(-1),startTime:l,offset:1};m.push(g)}const A={duration:m.at(-1).endTime*3,iterations:1/0};{let l=-1/0,f="";const g=m.map(({offset:u,usingCircles:M})=>{if(M!=l){let y=function(c){if(c.commands.length<2)throw new Error("wtf");const[Q,...b]=c.commands,w=b.pop();if(!(Q instanceof _&&w instanceof _))throw new Error("wtf");if(Q.x0==w.x&&Q.y0==w.y)return c;const T=(Q.x0+w.x)/2,R=(Q.y0+w.y)/2,O=_.controlPoints(T,R,Q.x1,Q.y1,Q.x,Q.y),f0=_.controlPoints(w.x0,w.y0,w.x1,w.y1,T,R);return new k([O,...b,f0])};const x=I0(n,M),P=k.parametric(x,h0);f=y(P).cssPath,l=M}return{offset:u,d:f,easing:"ease-in-out"}});t.push(this.#r.animate(g,A))}{const l=(f,g,u)=>{const M=c=>`'${c.toString().padStart(4,S.FIGURE_SPACE)}'`;let y;const x=new Array;u.forEach(({offset:c,circles:Q})=>{y!==void 0&&x.push({offset:c,content:y});const b=y=M(Q);x.push({offset:c,content:b})}),t.push(f.animate(x,{pseudoElement:"::after",...A}));const P=u.flatMap(({offset:c,circles:Q},b,w)=>{function T(O=Q){return O==0?.25:1}if(c==0||c==1)return[{offset:c,opacity:T()}];const R=w[b-1].circles;return R==Q?[]:[{offset:c-I,opacity:T(R)},{offset:c,opacity:0},{offset:c+I,opacity:T()}]});[f,g].forEach(c=>t.push(c.animate(P,A)))};l(this.#s,this.#a,m.map(({offset:f,usingCircles:g})=>({offset:f,circles:g}))),l(this.#h,this.#o,m.map(({offset:f,addingCircles:g})=>({offset:f,circles:g}))),l(this.#l,this.#i,m.map(({offset:f,availableCircles:g})=>({offset:f,circles:g})))}{let l=function(c){let Q;const b=new Array;return m.forEach(w=>{const{offset:T}=w,R=c(w);Q!==void 0&&b.push({offset:T,content:Q});const O=Q=g(R);b.push({offset:T,content:O})}),b};const f=new Intl.NumberFormat("en-US",{minimumSignificantDigits:5,maximumSignificantDigits:5,useGrouping:!1}).format,g=c=>(c<0&&(c=0),f(c)),u=l(c=>c.usingAmplitude),M=l(c=>c.addingAmplitude),y=l(c=>c.availableAmplitude),x=[...u,...M,...y];let P=0;x.forEach(c=>{const[,Q,b]=/^([0-9]+)\.([0-9]+)$/.exec(c.content);switch(Q.length){case 3:break;case 2:{c.content=S.FIGURE_SPACE+c.content;break}case 1:{c.content=S.FIGURE_SPACE+S.FIGURE_SPACE+c.content;break}default:throw console.warn({beforeDecimalPoint:Q,afterDecimalPoint:b,keyframe:c}),new Error("wtf")}P=Math.max(P,c.content.length)}),x.forEach(c=>{c.content=`'${(c.content+"%").padEnd(P+1,S.FIGURE_SPACE)}'`}),t.push(this.#a.animate(u,{pseudoElement:"::after",...A})),t.push(this.#o.animate(M,{pseudoElement:"::after",...A})),t.push(this.#i.animate(y,{pseudoElement:"::after",...A}))}}static update(s,i){this.#e.update(s,i)}}B.addEventListener("input",()=>{G.disabled=!1,H[0].code=B.value,L.selectedIndex=0});L.innerText="";H.forEach((a,s)=>{const i=document.createElement("option");i.innerText=a.name,L.appendChild(i),a.default&&(L.selectedIndex=s,B.value=a.code)});class V{static#e=F.getById("error",HTMLDivElement);static display(s){this.#e.innerText=s}static displayError(s){s instanceof d0?this.#e.innerHTML=`Unable to access <code>support.input(${s.requestedIndex})</code>.  Only ${C.length} input sliders currently exist.  <button onclick="addMoreInputs(this,${s.requestedIndex+1})">Add More</button>`:this.display(s.message)}static clear(){this.display("")}}function L0(a){try{return k.parametric(a,h0)}catch(s){if(s instanceof Error){V.displayError(s);return}else throw s}}const C=[];class d0 extends Error{constructor(s){super(`Unable to access support.input(${s}).  Only ${C.length} input sliders currently exist.`),this.requestedIndex=s}}const C0={hilbert:["m 128,384 0,-256 256,0 0,256","m 672,448 128,0 0,-128 -128,0 0,-128 0,-128 128,0 0,128 128,0 0,-128 128,0 0,128 0,128 -128,0 0,128 128,0","m 1248,480 0,-64 64,0 0,64 64,0 64,0 0,-64 -64,0 0,-64 64,0 0,-64 -64,0 -64,0 0,64 -64,0 0,-64 0,-64 64,0 0,-64 -64,0 0,-64 0,-64 64,0 0,64 64,0 0,-64 64,0 0,64 0,64 -64,0 0,64 64,0 64,0 64,0 0,-64 -64,0 0,-64 0,-64 64,0 0,64 64,0 0,-64 64,0 0,64 0,64 -64,0 0,64 64,0 0,64 0,64 -64,0 0,-64 -64,0 -64,0 0,64 64,0 0,64 -64,0 0,64 64,0 64,0 0,-64 64,0 0,64","m 528.5,1234 -32,0 0,-32 32,0 0,-64 -32,0 0,32 -32,0 0,-32 -32,0 0,64 32,0 0,32 -64,0 0,-32 -32,0 0,32 -64,0 0,-32 32,0 0,-32 -32,0 0,-32 64,0 0,32 32,0 0,-96 -32,0 0,32 -64,0 0,-32 32,0 0,-32 -32,0 0,-32 64,0 0,32 32,0 0,-32 64,0 0,32 -32,0 0,64 32,0 0,-32 32,0 0,32 32,0 0,-64 -32,0 0,-32 32,0 0,-64 -32,0 0,32 -64,0 0,-32 32,0 0,-32 -32,0 0,-32 64,0 0,32 32,0 0,-64 -32,0 0,-32 32,0 0,-64 -32,0 0,32 -32,0 0,-32 -32,0 0,64 32,0 0,32 -96,0 0,-32 32,0 0,-64 -32,0 0,32 -32,0 0,-32 -32,0 0,64 32,0 0,32 -32,0 0,64 32,0 0,-32 64,0 0,32 -32,0 0,32 32,0 0,32 -64,0 0,-32 -32,0 0,32 -32,0 0,-32 -32,0 0,32 -64,0 0,-32 32,0 0,-32 -32,0 0,-32 64,0 0,32 32,0 0,-64 -32,0 0,-32 32,0 0,-64 -32,0 0,32 -32,0 0,-32 -32,0 0,64 32,0 0,32 -96,0 0,-32 32,0 0,-64 -32,0 0,32 -32,0 0,-32 -32,0 0,64 32,0 0,32 -32,0 0,64 32,0 0,-32 64,0 0,32 -32,0 0,32 32,0 0,32 -64,0 0,-32 -32,0 0,64 32,0 0,32 -32,0 0,64 32,0 0,-32 32,0 0,32 32,0 0,-64 -32,0 0,-32 64,0 0,32 32,0 0,-32 64,0 0,32 -32,0 0,32 32,0 0,32 -64,0 0,-32 -32,0 0,96 32,0 0,-32 64,0 0,32 -32,0 0,32 32,0 0,32 -64,0 0,-32 -32,0 0,32 -64,0 0,-32 32,0 0,-64 -32,0 0,32 -32,0 0,-32 -32,0 0,64 32,0 0,32 -32,0","m 648.5,1242 0,-16 16,0 0,16 32,0 0,-16 -16,0 0,-16 16,0 0,-16 -32,0 0,16 -16,0 0,-32 16,0 0,-16 -16,0 0,-32 16,0 0,16 16,0 0,-16 16,0 0,32 -16,0 0,16 48,0 0,-16 -16,0 0,-32 16,0 0,16 16,0 0,-16 16,0 0,32 -16,0 0,16 16,0 0,32 -16,0 0,-16 -32,0 0,16 16,0 0,16 -16,0 0,16 32,0 0,-16 16,0 0,16 32,0 0,-16 -16,0 0,-32 16,0 0,16 16,0 0,-16 16,0 0,32 -16,0 0,16 32,0 0,-16 16,0 0,16 32,0 0,-16 -16,0 0,-16 16,0 0,-16 -32,0 0,16 -16,0 0,-48 16,0 0,16 32,0 0,-16 -16,0 0,-16 16,0 0,-16 -32,0 0,16 -16,0 0,-16 -32,0 0,16 16,0 0,32 -16,0 0,-16 -16,0 0,16 -16,0 0,-32 16,0 0,-16 -16,0 0,-16 16,0 0,-16 -16,0 0,-32 16,0 0,16 16,0 0,-16 16,0 0,32 -16,0 0,16 32,0 0,-16 16,0 0,16 32,0 0,-16 -16,0 0,-16 16,0 0,-16 -32,0 0,16 -16,0 0,-48 16,0 0,16 32,0 0,-16 -16,0 0,-16 16,0 0,-16 -32,0 0,16 -16,0 0,-16 -32,0 0,16 16,0 0,32 -16,0 0,-16 -16,0 0,16 -16,0 0,-32 16,0 0,-16 -32,0 0,16 -16,0 0,-16 -32,0 0,16 16,0 0,16 -16,0 0,16 32,0 0,-16 16,0 0,32 -16,0 0,16 16,0 0,32 -16,0 0,-16 -16,0 0,16 -16,0 0,-32 16,0 0,-16 -48,0 0,16 16,0 0,32 -16,0 0,-16 -16,0 0,16 -16,0 0,-32 16,0 0,-16 -16,0 0,-32 16,0 0,16 32,0 0,-16 -16,0 0,-16 16,0 0,-16 -32,0 0,16 -16,0 0,-32 16,0 0,-16 -16,0 0,-32 16,0 0,16 16,0 0,-16 16,0 0,32 -16,0 0,16 32,0 0,-16 16,0 0,16 32,0 0,-16 -16,0 0,-16 16,0 0,-16 -32,0 0,16 -16,0 0,-48 16,0 0,16 32,0 0,-16 -16,0 0,-16 16,0 0,-16 -32,0 0,16 -16,0 0,-16 -32,0 0,16 16,0 0,32 -16,0 0,-16 -16,0 0,16 -16,0 0,-32 16,0 0,-16 -16,0 0,-32 16,0 0,16 32,0 0,-16 -16,0 0,-16 16,0 0,-16 -32,0 0,16 -16,0 0,-32 16,0 0,-16 -16,0 0,-32 16,0 0,16 16,0 0,-16 16,0 0,32 -16,0 0,16 48,0 0,-16 -16,0 0,-32 16,0 0,16 16,0 0,-16 16,0 0,32 -16,0 0,16 16,0 0,32 -16,0 0,-16 -32,0 0,16 16,0 0,16 -16,0 0,16 32,0 0,-16 16,0 0,16 16,0 0,-16 16,0 0,16 32,0 0,-16 -16,0 0,-16 16,0 0,-16 -32,0 0,16 -16,0 0,-32 16,0 0,-16 -16,0 0,-32 16,0 0,16 16,0 0,-16 16,0 0,32 -16,0 0,16 48,0 0,-16 -16,0 0,-32 16,0 0,16 16,0 0,-16 16,0 0,32 -16,0 0,16 16,0 0,32 -16,0 0,-16 -32,0 0,16 16,0 0,16 -16,0 0,16 32,0 0,-16 16,0 0,32 -16,0 0,16 16,0 0,32 -16,0 0,-16 -16,0 0,16 -16,0 0,-32 16,0 0,-16 -32,0 0,16 -16,0 0,-16 -32,0 0,16 16,0 0,16 -16,0 0,16 32,0 0,-16 16,0 0,48 -16,0 0,-16 -32,0 0,16 16,0 0,16 -16,0 0,16 32,0 0,-16 16,0 0,16 32,0 0,-16 -16,0 0,-32 16,0 0,16 16,0 0,-16 16,0 0,32 -16,0 0,16 48,0 0,-16 -16,0 0,-32 16,0 0,16 16,0 0,-16 16,0 0,32 -16,0 0,16 32,0 0,-16 16,0 0,16 32,0 0,-16 -16,0 0,-16 16,0 0,-16 -32,0 0,16 -16,0 0,-48 16,0 0,16 32,0 0,-16 -16,0 0,-16 16,0 0,-16 -32,0 0,16 -16,0 0,-16 -32,0 0,16 16,0 0,32 -16,0 0,-16 -16,0 0,16 -16,0 0,-32 16,0 0,-16 -16,0 0,-32 16,0 0,16 32,0 0,-16 -16,0 0,-16 16,0 0,-16 -32,0 0,16 -16,0 0,-32 16,0 0,-16 -16,0 0,-32 16,0 0,16 16,0 0,-16 16,0 0,32 -16,0 0,16 48,0 0,-16 -16,0 0,-32 16,0 0,16 16,0 0,-16 16,0 0,32 -16,0 0,16 16,0 0,32 -16,0 0,-16 -32,0 0,16 16,0 0,16 -16,0 0,16 32,0 0,-16 16,0 0,16 16,0 0,-16 16,0 0,16 32,0 0,-16 -16,0 0,-16 16,0 0,-16 -32,0 0,16 -16,0 0,-32 16,0 0,-16 -16,0 0,-32 16,0 0,16 16,0 0,-16 16,0 0,32 -16,0 0,16 48,0 0,-16 -16,0 0,-32 16,0 0,16 16,0 0,-16 16,0 0,32 -16,0 0,16 16,0 0,32 -16,0 0,-16 -32,0 0,16 16,0 0,16 -16,0 0,16 32,0 0,-16 16,0 0,32 -16,0 0,16 16,0 0,32 -16,0 0,-16 -16,0 0,16 -16,0 0,-32 16,0 0,-16 -32,0 0,16 -16,0 0,-16 -32,0 0,16 16,0 0,16 -16,0 0,16 32,0 0,-16 16,0 0,48 -16,0 0,-16 -32,0 0,16 16,0 0,16 -16,0 0,16 32,0 0,-16 16,0 0,16 32,0 0,-16 -16,0 0,-32 16,0 0,16 16,0 0,-16 16,0 0,32 -16,0 0,16 16,0 0,32 -16,0 0,-16 -32,0 0,16 16,0 0,16 -16,0 0,16 32,0 0,-16 16,0 0,32 -16,0 0,16 16,0 0,32 -16,0 0,-16 -16,0 0,16 -16,0 0,-32 16,0 0,-16 -48,0 0,16 16,0 0,32 -16,0 0,-16 -16,0 0,16 -16,0 0,-32 16,0 0,-16 -16,0 0,-32 16,0 0,16 32,0 0,-16 -16,0 0,-16 16,0 0,-16 -32,0 0,16 -16,0 0,-16 -32,0 0,16 16,0 0,32 -16,0 0,-16 -16,0 0,16 -16,0 0,-32 16,0 0,-16 -32,0 0,16 -16,0 0,-16 -32,0 0,16 16,0 0,16 -16,0 0,16 32,0 0,-16 16,0 0,48 -16,0 0,-16 -32,0 0,16 16,0 0,16 -16,0 0,16 32,0 0,-16 16,0 0,16 32,0 0,-16 -16,0 0,-32 16,0 0,16 16,0 0,-16 16,0 0,32 -16,0 0,16 16,0 0,16 -16,0 0,16 16,0 0,32 -16,0 0,-16 -16,0 0,16 -16,0 0,-32 16,0 0,-16 -32,0 0,16 -16,0 0,-16 -32,0 0,16 16,0 0,16 -16,0 0,16 32,0 0,-16 16,0 0,48 -16,0 0,-16 -32,0 0,16 16,0 0,16 -16,0 0,16 32,0 0,-16 16,0 0,16 32,0 0,-16 -16,0 0,-32 16,0 0,16 16,0 0,-16 16,0 0,32 -16,0 0,16 32,0 0,-16 16,0 0,16 32,0 0,-16 -16,0 0,-16 16,0 0,-16 -32,0 0,16 -16,0 0,-32 16,0 0,-16 -16,0 0,-32 16,0 0,16 16,0 0,-16 16,0 0,32 -16,0 0,16 48,0 0,-16 -16,0 0,-32 16,0 0,16 16,0 0,-16 16,0 0,32 -16,0 0,16 16,0 0,32 -16,0 0,-16 -32,0 0,16 16,0 0,16 -16,0 0,16 32,0 0,-16 16,0 0,16","m 1756.5,1246 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-24 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -24,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -8,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -24,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,24 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -24,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-24 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-8 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-24 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 24,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-24 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -24,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-24 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-8 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-24 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 24,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,24 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 24,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-8 8,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 24,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-24 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -24,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-24 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-8 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-24 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 24,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-24 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -24,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -8,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -24,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,24 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -24,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-24 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -24,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -8,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -24,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,24 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 24,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,24 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,8 8,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,24 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -24,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -8,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -24,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-24 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-8 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-24 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 24,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-24 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -24,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -8,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -24,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,24 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -24,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-24 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -24,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -8,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -24,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,24 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 24,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,24 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,8 8,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,24 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -24,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,24 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 24,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-8 8,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 24,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-24 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 24,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,24 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,8 8,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,24 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -24,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,24 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 24,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,24 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,8 8,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,24 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -24,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-24 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -24,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -8,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-8 -8,0 0,-8 16,0 0,8 8,0 0,-16 -8,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -24,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,16 8,0 0,8 -8,0 0,16 8,0 0,-8 8,0 0,8 8,0 0,-16 -8,0 0,-8 16,0 0,8 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,24 8,0 0,-8 16,0 0,8 -8,0 0,8 8,0 0,8 -16,0 0,-8 -8,0 0,8 -16,0 0,-8 8,0 0,-16 -8,0 0,8 -8,0 0,-8 -8,0 0,16 8,0 0,8 -8,0"],peanocurve:["m24 275v-264h132v264h132v-264","m337 275v-66h33v66h33v-165h-33v66h-33v-165h33v66h33v-66h33v66h33v-66h33v165h-33v-66h-33v165h33v-66h33v66h33v-66h33v66h33v-165h-33v66h-33v-165h33v66h33v-33-33","m647 275v-20.2h10.1v20.2h10.1v-50.5h-10.1v20.2h-10.1v-50.5h10.1v20.2h10.1v-20.2h10.1v20.2h10.1v-20.2h10.1v50.5h-10.1v-20.2h-10.1v50.5h10.1v-20.2h10.1v20.2h10.1v-20.2h10.1v20.2h10.1v-50.5h-10.1v20.2h-10.1v-50.5h10.1v20.2h10.1v-50.5h-10.1v20.2h-10.1v-50.5h10.1v20.2h10.1v-50.5h-10.1v20.2h-10.1v-20.2h-10.1v20.2h-10.1v-20.2h-10.1v50.5h10.1v-20.2h10.1v50.5h-10.1v-20.2h-10.1v20.2h-10.1v-20.2h-10.1v20.2h-10.1v-50.5h10.1v20.2h10.1v-50.5h-10.1v20.2h-10.1v-50.5h10.1v20.2h10.1v-50.5h-10.1v20.2h-10.1v-50.5h10.1v20.2h10.1v-20.2h10.1v20.2h10.1v-20.2h10.1v50.5h-10.1v-20.2h-10.1v50.5h10.1v-20.2h10.1v20.2h10.1v-20.2h10.1v20.2h10.1v-50.5h-10.1v20.2h-10.1v-50.5h10.1v20.2h10.1v-20.2h10.1v20.2h10.1v-20.2h10.1v50.5h-10.1v-20.2h-10.1v50.5h10.1v-20.2h10.1v20.2h10.1v-20.2h10.1v20.2h10.1v-50.5h-10.1v20.2h-10.1v-50.5h10.1v20.2h10.1v-20.2h10.1v20.2h10.1v-20.2h10.1v50.5h-10.1v-20.2h-10.1v50.5h10.1v-20.2h10.1v50.5h-10.1v-20.2h-10.1v50.5h10.1v-20.2h10.1v50.5h-10.1v-20.2h-10.1v20.2h-10.1v-20.2h-10.1v20.2h-10.1v-50.5h10.1v20.2h10.1v-50.5h-10.1v20.2h-10.1v-20.2h-10.1v20.2h-10.1v-20.2h-10.1v50.5h10.1v-20.2h10.1v50.5h-10.1v-20.2h-10.1v50.5h10.1v-20.2h10.1v50.5h-10.1v-20.2h-10.1v50.5h10.1v-20.2h10.1v20.2h10.1v-20.2h10.1v20.2h10.1v-50.5h-10.1v20.2h-10.1v-50.5h10.1v20.2h10.1v-20.2h10.1v20.2h10.1v-20.2h10.1v50.5h-10.1v-20.2h-10.1v50.5h10.1v-20.2h10.1v20.2h10.1v-20.2h10.1v20.2h10.1v-50.5h-10.1v20.2h-10.1v-50.5h10.1v20.2h10.1v-20.2h10.1v20.2h10.1v-20.2h10.1v50.5h-10.1v-20.2h-10.1v50.5h10.1v-20.2h10.1v20.2h10.1v-20.2h10.1v20.2h10.1v-50.5h-10.1v20.2h-10.1v-50.5h10.1v20.2h10.1v-50.5h-10.1v20.2h-10.1v-50.5h10.1v20.2h10.1v-50.5h-10.1v20.2h-10.1v-20.2h-10.1v20.2h-10.1v-20.2h-10.1v50.5h10.1v-20.2h10.1v50.5h-10.1v-20.2h-10.1v20.2h-10.1v-20.2h-10.1v20.2h-10.1v-50.5h10.1v20.2h10.1v-50.5h-10.1v20.2h-10.1v-50.5h10.1v20.2h10.1v-50.5h-10.1v20.2h-10.1v-50.5h10.1v20.2h10.1v-20.2h10.1v20.2h10.1v-20.2h10.1v50.5h-10.1v-20.2h-10.1v50.5h10.1v-20.2h10.1v20.2h10.1v-20.2h10.1v20.2h10.1v-50.5h-10.1v20.2h-10.1v-50.5h10.1v20.2h10.1v-20.2"],likeShareAndSubscribe:"M 39,9 Q 40,9.1231056 41,9 Q 43.410165,8.7032951 45,8 Q 46.217197,7.4615485 48,6 Q 49.365084,4.8808987 50,4 Q 50.784959,2.9109272 51,2 Q 51.354102,0.5 51,-1 Q 50.618034,-2.618034 50,-3 Q 49.197453,-3.4960013 48,-3 Q 47.60191,-2.8351058 47,-2 Q 46.401133,-1.1691162 46,0 Q 46,0.000000000000010354513 45,5 Q 44.5,7.5 44,10 Q 43.566518,11.632305 43,13 Q 42.403407,14.440302 42,15 Q 41.162278,16.162278 40,17 Q 38.910927,17.784959 38,18 Q 36.726049,18.300739 36,18 Q 35.292893,17.707107 35,17 Q 34.585786,16 35,15 Q 35.292893,14.292893 36,14 Q 36.726049,13.699261 38,14 Q 38.774116,14.182744 40,15 L 43,17 Q 44.017403,17.678269 46,18 Q 47,18.162278 48,18 Q 49.874032,17.695886 51,17 Q 52.236068,16.236068 53,15 M 54,13 L 56,9 L 54,15 Q 53.630602,16.108194 54,17 Q 54.292893,17.707107 55,18 Q 55.363024,18.15037 56,18 Q 56.910927,17.784959 58,17 Q 58.440449,16.682542 59,16 Q 60.148529,14.59902 61,13 Q 62.035694,11.523796 63,10 Q 64.925759,6.9569162 66,5 Q 66.699047,3.7265649 67,3 Q 67.84371,0.96310484 68,0 Q 68.233196,-1.437016 68,-2 Q 67.627999,-2.8980898 67,-3 Q 66.13962,-3.1396204 65,-2 Q 64.58711,-1.5871103 64,0 Q 63.616109,1.0377567 63,4 Q 62.373436,7.0125113 62,10 L 61,18 Q 61.393398,16.464466 62,15 Q 62.400589,14.032893 63,13 Q 64.468871,10.468871 65,10 Q 65.816225,9.2794515 67,9 Q 68.273951,8.6992609 69,9 Q 69.707107,9.2928932 70,10 Q 70.496001,11.197453 70,12 Q 69.618034,12.618034 68,13 Q 66.5,13.354102 65,13 Q 66.707107,13.12132 67,14 L 68,17 Q 68.226541,17.679623 69,18 Q 69.363024,18.15037 70,18 Q 70.910927,17.784959 72,17 Q 72.440449,16.682542 73,16 Q 74.148529,14.59902 75,13 M 76,16 Q 77.081139,15.662278 78,15 Q 78.581139,14.581139 79,14 Q 79.784959,12.910927 80,12 Q 80.300739,10.726049 80,10 Q 79.707107,9.2928932 79,9 Q 78.636976,8.8496304 78,9 Q 76.690983,9.309017 76,10 Q 75.309017,10.690983 75,12 Q 74.645898,13.5 75,15 Q 75.309017,16.309017 76,17 Q 76.690983,17.690983 78,18 Q 79,18.236068 80,18 Q 80.910927,17.784959 82,17 Q 82.440449,16.682542 83,16 Q 84.148529,14.59902 85,13M 92.5,43 Q 91.648529,44.59902 90.5,46 Q 89.940449,46.682542 89.5,47 Q 88.410927,47.784959 87.5,48 Q 86.5,48.236068 85.5,48 Q 84.190983,47.690983 83.5,47 Q 82.809017,46.309017 82.5,45 Q 82.145898,43.5 82.5,42 Q 82.809017,40.690983 83.5,40 Q 84.190983,39.309017 85.5,39 Q 86.136976,38.84963 86.5,39 Q 87.207107,39.292893 87.5,40 Q 87.800739,40.726049 87.5,42 Q 87.284959,42.910927 86.5,44 Q 86.081139,44.581139 85.5,45 Q 84.581139,45.662278 83.5,46 M 82.5,43 Q 81.648529,44.59902 80.5,46 Q 79.940449,46.682542 79.5,47 Q 78.410927,47.784959 77.5,48 Q 76.863024,48.15037 76.5,48 Q 75.792893,47.707107 75.5,47 Q 75.315301,46.554097 75.5,46 L 76.5,43 Q 76.869398,41.891806 76.5,41 Q 76.085786,40 75.5,40 L 72.5,40 Q 70.5,40 72.5,38 Q 72.062258,39.031129 71.5,40 Q 70.593387,41.562258 69.5,43 Q 68.648529,44.59902 67.5,46 Q 66.940449,46.682542 66.5,47 Q 65.410927,47.784959 64.5,48 Q 63.863024,48.15037 63.5,48 Q 62.792893,47.707107 62.5,47 Q 62.095372,46.023141 62.5,44 L 63.5,39 L 61.5,45 Q 61,46.5 60.5,47 Q 59.809017,47.690983 58.5,48 Q 57.5,48.236068 56.5,48 Q 55.190983,47.690983 54.5,47 Q 53.809017,46.309017 53.5,45 Q 53.263932,44 53.5,43 Q 53.715041,42.089073 54.5,41 Q 54.918861,40.418861 55.5,40 Q 56.589073,39.215041 57.5,39 Q 58.5,38.763932 59.5,39 Q 60.809017,39.309017 61.5,40 Q 62.333333,40.833333 62.5,42 M 53.5,43 Q 52.648529,44.59902 51.5,46 Q 50.940449,46.682542 50.5,47 Q 49.410927,47.784959 48.5,48 Q 47.863024,48.15037 47.5,48 Q 46.792893,47.707107 46.5,47 Q 46.130602,46.108194 46.5,45 L 47.5,42 Q 47.869398,40.891806 47.5,40 Q 47.207107,39.292893 46.5,39 Q 45.773951,38.699261 44.5,39 Q 43.316225,39.279451 42.5,40 Q 41.968871,40.468871 40.5,43 Q 39.900589,44.032893 39.5,45 Q 38.893398,46.464466 38.5,48 L 39.5,40 Q 39.873436,37.012511 40.5,34 Q 41.116109,31.037757 41.5,30 Q 42.08711,28.41289 42.5,28 Q 43.63962,26.86038 44.5,27 Q 45.127999,27.10191 45.5,28 Q 45.733196,28.562984 45.5,30 Q 45.34371,30.963105 44.5,33 Q 44.199047,33.726565 43.5,35 Q 42.425759,36.956916 40.5,40 Q 39.535694,41.523796 38.5,43 Q 37.648529,44.59902 36.5,46 Q 35.940449,46.682542 35.5,47 Q 34.410927,47.784959 33.5,48 Q 31.5,48.472136 29.5,48 Q 28.381966,47.736068 27.5,47 M 31.5,48 Q 32.809017,48.118034 33.5,47 Q 33.841641,46.447214 33.5,45 Q 33.317256,44.225884 32.5,43 L 30.5,40 Q 30.083574,39.375361 30.5,38 Q 30.062258,39.031129 29.5,40 Q 28.593387,41.562258 27.5,43M 44,72 Q 43.833333,70.833333 43,70 Q 42.309017,69.309017 41,69 Q 40,68.763932 39,69 Q 38.089073,69.215041 37,70 Q 36.418861,70.418861 36,71 Q 35.215041,72.089073 35,73 Q 34.763932,74 35,75 Q 35.309017,76.309017 36,77 Q 36.690983,77.690983 38,78 Q 39,78.236068 40,78 Q 41.309017,77.690983 42,77 Q 42.5,76.5 43,75 L 45,69 L 44,74 Q 43.595372,76.023141 44,77 Q 44.292893,77.707107 45,78 Q 45.363024,78.15037 46,78 Q 46.910927,77.784959 48,77 Q 48.440449,76.682542 49,76 Q 50.148529,74.59902 51,73 Q 51.601653,71.234436 53,70 Q 54.267444,68.881123 55,69 Q 55.627999,69.10191 56,70 Q 56.094901,70.229111 56,71 Q 55.879306,71.980414 55,75 Q 54.557607,76.519202 54,78 M 55,75 Q 55.437742,73.968871 56,73 Q 57.468871,70.468871 58,70 Q 58.816225,69.279451 60,69 Q 61.273951,68.699261 62,69 Q 62.707107,69.292893 63,70 Q 63.369398,70.891806 63,72 L 62,75 Q 61.630602,76.108194 62,77 Q 62.292893,77.707107 63,78 Q 63.363024,78.15037 64,78 Q 64.910927,77.784959 66,77 Q 66.440449,76.682542 67,76 Q 68.148529,74.59902 69,73 M 78,72 Q 77.833333,70.833333 77,70 Q 76.309017,69.309017 75,69 Q 74,68.763932 73,69 Q 72.089073,69.215041 71,70 Q 70.418861,70.418861 70,71 Q 69.215041,72.089073 69,73 Q 68.763932,74 69,75 Q 69.309017,76.309017 70,77 Q 70.690983,77.690983 72,78 Q 73,78.236068 74,78 Q 75.309017,77.690983 76,77 Q 76.5,76.5 77,75 L 83,57 M 79,69 L 78,74 Q 77.595372,76.023141 78,77 Q 78.292893,77.707107 79,78 Q 79.363024,78.15037 80,78 Q 80.910927,77.784959 82,77 Q 82.440449,76.682542 83,76 Q 84.148529,74.59902 85,73M 113,103 Q 112.14853,104.59902 111,106 Q 110.44045,106.68254 110,107 Q 108.91093,107.78496 108,108 Q 107,108.23607 106,108 Q 104.69098,107.69098 104,107 Q 103.30902,106.30902 103,105 Q 102.6459,103.5 103,102 Q 103.30902,100.69098 104,100 Q 104.69098,99.309017 106,99 Q 106.63698,98.84963 107,99 Q 107.70711,99.292893 108,100 Q 108.30074,100.72605 108,102 Q 107.78496,102.91093 107,104 Q 106.58114,104.58114 106,105 Q 105.08114,105.66228 104,106 M 103,103 Q 102.11803,103.73607 101,104 Q 99.726049,104.30074 99,104 Q 98.433281,103.76526 98,103 Q 96.946032,101.13849 97,99 Q 97.243416,100.5 97,102 Q 96.695886,103.87403 96,105 Q 95.37758,106.0071 94,107 Q 92.910927,107.78496 92,108 Q 91.363024,108.15037 91,108 Q 90.292893,107.70711 90,107 Q 89.636039,106.12132 90,101 Q 90.211354,98.026019 91,94 Q 91.539922,91.243708 92,90 Q 92.58711,88.41289 93,88 Q 94.13962,86.86038 95,87 Q 95.627999,87.10191 96,88 Q 96.233196,88.562984 96,90 Q 95.84371,90.963105 95,93 Q 94.699047,93.726565 94,95 Q 92.925759,96.956916 91,100 Q 90.035694,101.5238 89,103 Q 88.148529,104.59902 87,106 Q 86.440449,106.68254 86,107 Q 84.910927,107.78496 84,108 Q 83.363024,108.15037 83,108 Q 82.292893,107.70711 82,107 Q 81.630602,106.10819 82,105 L 84,99 L 82,103 Q 81.148529,104.59902 80,106 Q 79.440449,106.68254 79,107 Q 77.910927,107.78496 77,108 Q 76.363024,108.15037 76,108 Q 75.292893,107.70711 75,107 Q 74.815301,106.5541 75,106 L 76,103 Q 76.369398,101.89181 76,101 Q 75.585786,100 75,100 L 72,100 Q 70,100 72,98 Q 71.562258,99.031129 71,100 Q 70.093387,101.56226 69,103 Q 68.3,104.7 67,106 Q 65.434259,107.56574 64,108 Q 62.685697,108.39794 61,108 Q 59.690983,107.69098 59,107 Q 58.309017,106.30902 58,105 Q 57.763932,104 58,103 Q 58.215041,102.08907 59,101 Q 59.418861,100.41886 60,100 Q 61.089073,99.215041 62,99 Q 63.273951,98.699261 64,99 Q 64.707107,99.292893 65,100 Q 65.207107,100.5 65,101 M 58,103 Q 57.148529,104.59902 56,106 Q 55.440449,106.68254 55,107 Q 53.910927,107.78496 53,108 Q 51,108.47214 49,108 Q 47.881966,107.73607 47,107 M 51,108 Q 52.309017,108.11803 53,107 Q 53.341641,106.44721 53,105 Q 52.817256,104.22588 52,103 L 50,100 Q 49.583574,99.375361 50,98 Q 49.562258,99.031129 49,100 Q 48.093387,101.56226 47,103 Q 46.118034,103.73607 45,104 Q 43.726049,104.30074 43,104 Q 42.433281,103.76526 42,103 Q 40.946032,101.13849 41,99 Q 41.243416,100.5 41,102 Q 40.695886,103.87403 40,105 Q 39.37758,106.0071 38,107 Q 36.910927,107.78496 36,108 Q 35.363024,108.15037 35,108 Q 34.292893,107.70711 34,107 Q 33.636039,106.12132 34,101 Q 34.211354,98.026019 35,94 Q 35.539922,91.243708 36,90 Q 36.58711,88.41289 37,88 Q 38.13962,86.86038 39,87 Q 39.627999,87.10191 40,88 Q 40.233196,88.562984 40,90 Q 39.84371,90.963105 39,93 Q 38.699047,93.726565 38,95 Q 36.925759,96.956916 35,100 Q 34.035694,101.5238 33,103 Q 32.148529,104.59902 31,106 Q 30.440449,106.68254 30,107 Q 28.910927,107.78496 28,108 Q 27.363024,108.15037 27,108 Q 26.292893,107.70711 26,107 Q 25.630602,106.10819 26,105 L 28,99 M 27,102 Q 26.148529,103.59902 25,105 Q 23.880899,106.36508 23,107 Q 21.910927,107.78496 21,108 Q 19.726049,108.30074 19,108 Q 18.292893,107.70711 18,107 Q 17.630602,106.10819 18,105 L 20,99 L 18,103 Q 17.148529,104.59902 16,106 Q 15.440449,106.68254 15,107 Q 13.910927,107.78496 13,108 Q 11,108.47214 9,108 Q 7.881966,107.73607 7,107 M 11,108 Q 12.309017,108.11803 13,107 Q 13.341641,106.44721 13,105 Q 12.817256,104.22588 12,103 L 10,100 Q 9.5835741,99.375361 10,98 Q 9.5622577,99.031129 9,100 Q 8.0933866,101.56226 7,103"},N={input(a){if(!Number.isSafeInteger(a)||a<0)throw new RangeError(`invalid ${a}`);if(a>=C.length)throw new d0(a);return C[a]},ease(a){return(1-Math.cos(Math.PI*a))/2},makeTSplitter:Q0,makeTSplitterA:m0,lerpPoints:v0,lerp:S.lerp,makeLinear:S.makeLinear,random:a=>{if(typeof a!="string")throw new RangeError("Invalid seed.  Expecting a string.");return g0.fromString(a)},referencePath:new u0,samples:C0,cursiveLetters:y0,futuraLLetters:M0},q0=F.getById("inputs",HTMLDivElement);function U(){G.disabled=!1;const a=C.length,s=.5,i=`<div class="has-slider">
      <input type="range" min="0" max="1" value="${s}" step="0.00001" oninput="copyNewInput(this, ${a})" />
      <code>support.input(${a})</code> =
      <span>${s.toString().padEnd(7,"0")}</span>
    </div>`;q0.insertAdjacentHTML("beforeend",i),C.push(s)}window.addMoreInputs=(a,s)=>{for(a.disabled=!0;C.length<s;)U()};E("#inputsGroup button",HTMLButtonElement).addEventListener("click",()=>{U()});U();U();{const a=()=>{V.clear();const t=`"use strict";
`+B.value+`
return f;`;let e;try{e=new Function("support",t)}catch(r){if(r instanceof SyntaxError){V.displayError(r);return}else throw r}let n;N.referencePath.clear();try{n=e(N)}catch(r){if(r instanceof Error){V.displayError(r);return}else throw r}const o=r=>{const d=n(r,N);if(!(Number.isFinite(d.x)&&Number.isFinite(d.y)))throw new Error(`Invalid result.  Expected {x,y} where x and y are both finite numbers.  Found: ${JSON.stringify(d)} when t=${r}.`);return d};if(N.referencePath.empty){const r=L0(o);if(!r)return;N.referencePath.d=r.rawPath}P0.update(o,N.referencePath.d),S0.update(o,N.referencePath.d)};let s=!1;const i=()=>{G.disabled=!0,s||(s=!0,requestAnimationFrame(()=>{s=!1,a()}))};G.addEventListener("click",i),window.copyNewInput=(t,e)=>{C[e]=t.valueAsNumber;const n=S.assertClass(t.parentElement?.lastElementChild,HTMLSpanElement);n.innerText=t.valueAsNumber.toFixed(5),i()};{const t=()=>{const e=H[L.selectedIndex];B.value=e.code,i()};L.addEventListener("change",t),F.getById("nextSample",HTMLButtonElement).addEventListener("click",()=>{L.selectedIndex=(L.selectedIndex+1)%H.length,t()})}{const t=F.getById("codeSamplesHolder",HTMLDivElement),e=F.getById("inputsGroup",HTMLDivElement),n=`<div>
            <div data-description>
              <button class="show-this">Show This</button><span></span>
            </div>
            <pre data-code-snippet></pre></div>`;H.forEach((o,r)=>{if(r>0){t.insertAdjacentHTML("beforeend",n);const d=t.lastElementChild,h=E("span",HTMLSpanElement,d);h.innerText=o.name;const v=E("pre",HTMLPreElement,d);v.innerText=o.code,E("button",HTMLButtonElement,d).addEventListener("click",()=>{B.value=o.code,i(),e.scrollIntoView({behavior:"smooth"})})}})}i()}{const a=F.getById("hide-text",HTMLInputElement);a.addEventListener("click",()=>{a.checked?document.documentElement.dataset.hide="requested":delete document.documentElement.dataset.hide})}
