import"./modulepreload-polyfill-B5Qt9EMX.js";import{g as h}from"./client-misc-1LRynplM.js";/* empty css              */import{P as S}from"./path-shape-BgXUztkR.js";import{b as v,s as T}from"./utility-2TZy30Cu.js";import{m as p}from"./misc-CLGTS8fC.js";const g=h("go",HTMLButtonElement),E=h("source",HTMLTextAreaElement),b=h("result",HTMLElement);E.addEventListener("input",()=>g.disabled=!1);class w{static#t=h("error",HTMLDivElement);static display(t){this.#t.innerText=t}static displayError(t){t instanceof x?this.#t.innerHTML=`Unable to access <code>support.input(${t.requestedIndex})</code>.  Only ${c.length} input sliders currently exist.  <button onclick="addMoreInputs(this,${t.requestedIndex+1})">Add More</button>`:this.display(t.message)}static clear(){this.display("")}}class r{#t;get svgElement(){return this.#t}#e;get pathElement(){return this.#e}constructor(t){this.#t=v(t,SVGSVGElement),this.#e=p.assertClass(this.#t.firstElementChild,SVGPathElement),r.all.add(this)}static all=new Set;#n=NaN;get recommendedWidth(){return this.#n}#s(){const t=this.#e.getBBox(),e=this.#t.viewBox.baseVal;e.x=t.x,e.y=t.y,e.width=t.width,e.height=t.height,this.#n=Math.max(e.width,e.height)/100,this.#t.style.setProperty("--recommended-width",this.#n.toString())}setD(t){this.#e.setAttribute("d",t),this.#s()}static setD(t){this.all.forEach(e=>e.setD(t))}static getOuterHTML(){return p.pickAny(r.all).#e.outerHTML}deAnimate(){this.#e.getAnimations().forEach(t=>t.cancel())}}new r("#filledSample");new r("#outlineSample");class L extends r{constructor(){super("#chasingPathsSample")}setD(t){super.setD(t);const e=this.pathElement,a=1500,u=Date.now()/a%1;this.deAnimate();const l=e.getTotalLength();e.style.strokeDasharray=`0 ${l} ${l} 0`,e.animate([{strokeDashoffset:0},{strokeDashoffset:-2*l}],{iterations:1/0,duration:a,iterationStart:u})}}new L;class D extends r{constructor(){super("#dancingAntsSample")}setD(t){super.setD(t);const e=this.pathElement,a=250;this.deAnimate();const u=e.getTotalLength(),l=Date.now()/a%1,s=4*this.recommendedWidth,o=s*10<u?u/Math.round(u/s):s;e.style.strokeDasharray=`0 ${o}`,e.animate([{strokeDashoffset:0},{strokeDashoffset:-o}],{iterations:1/0,duration:a,iterationStart:l})}}new D;class A extends r{constructor(){super("#tauFollowingPathSample")}setD(t){super.setD(t),this.svgElement.style.setProperty("--css-path",S.cssifyPath(t))}}new A;new r("#textPathSample");const c=[];class x extends Error{constructor(t){super(`Unable to access support.input(${t}).  Only ${c.length} input sliders currently exist.`),this.requestedIndex=t}}const M={input(n){if(!Number.isSafeInteger(n)||n<0)throw new RangeError(`invalid ${n}`);if(n>=c.length)throw new x(n);return c[n]}},I=h("inputs",HTMLDivElement);function f(){g.disabled=!1;const n=c.length,t=.5,e=`<div class="has-slider">
      <input type="range" min="0" max="1" value="${t}" step="0.00001" oninput="copyNewInput(this, ${n})" />
      <code>support.input(${n})</code> =
      <span>${t.toString().padEnd(7,"0")}</span>
    </div>`;I.insertAdjacentHTML("beforeend",e),c.push(t)}window.addMoreInputs=(n,t)=>{for(n.disabled=!0;c.length<t;)f()};v("#inputsGroup button",HTMLButtonElement).addEventListener("click",()=>{f()});f();f();{const n=h("segmentCountInput",HTMLInputElement),t=()=>{w.clear();const s=`"use strict";
`+E.value+`
return { x, y };`;let o;try{o=new Function("t /* A value between 0 and 1, inclusive. */","support",s)}catch(i){if(i instanceof SyntaxError){w.displayError(i);return}else throw i}const d=i=>{const m=o(i,M);if(!(Number.isFinite(m.x)&&Number.isFinite(m.y)))throw new Error(`Invalid result.  Expected {x,y} where x and y are both finite numbers.  Found: ${JSON.stringify(m)} when t=${i}.`);return m};let y;try{y=S.parametric(d,n.valueAsNumber).rawPath}catch(i){if(i instanceof Error){w.displayError(i);return}else throw i}r.setD(y),b.innerText=r.getOuterHTML()};let e=!1;const a=()=>{g.disabled=!0,e||(e=!0,requestAnimationFrame(()=>{e=!1,t()}))};g.addEventListener("click",a);const u=h("segmentCountSpan",HTMLSpanElement),l=()=>{u.innerText=n.value.padStart(3,p.FIGURE_SPACE)};l(),n.addEventListener("input",()=>{l(),a()}),window.copyNewInput=(s,o)=>{c[o]=s.valueAsNumber;const d=p.assertClass(s.parentElement?.lastElementChild,HTMLSpanElement);d.innerText=s.valueAsNumber.toFixed(5),a()},T("button.show-this",HTMLButtonElement).forEach(s=>{const o=p.assertClass(s.parentElement?.nextElementSibling,HTMLPreElement);s.addEventListener("click",()=>{const d=o.innerText;E.value=d,a(),E.scrollIntoView({behavior:"smooth"})})}),a()}
