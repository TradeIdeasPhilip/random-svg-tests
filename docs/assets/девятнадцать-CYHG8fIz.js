import"./modulepreload-polyfill-B5Qt9EMX.js";import{g as r}from"./client-misc-1LRynplM.js";/* empty css              */import{P as T}from"./path-shape-BgXUztkR.js";import{s as S,b as I}from"./utility-2TZy30Cu.js";import{m as y}from"./misc-CLGTS8fC.js";const d=r("go",HTMLButtonElement),g=r("source",HTMLTextAreaElement),L=r("result",HTMLElement);g.addEventListener("input",()=>d.disabled=!1);class E{static#t=r("error",HTMLDivElement);static display(e){this.#t.innerText=e}static displayError(e){e instanceof x?this.#t.innerHTML=`Unable to access <code>support.input(${e.requestedIndex})</code>.  Only ${s.length} input sliders currently exist.  <button onclick="addMoreInputs(this,${e.requestedIndex+1})">Add More</button>`:this.display(e.message)}static clear(){this.display("")}}const f=S("[data-sample]",SVGSVGElement).map(t=>{const e=y.assertClass(t.firstElementChild,SVGPathElement);return{svg:t,path:e}}),s=[];class x extends Error{constructor(e){super(`Unable to access support.input(${e}).  Only ${s.length} input sliders currently exist.`),this.requestedIndex=e}}const M={input(t){if(!Number.isSafeInteger(t)||t<0)throw new RangeError(`invalid ${t}`);if(t>=s.length)throw new x(t);return s[t]}},A=r("inputs",HTMLDivElement);function h(){d.disabled=!1;const t=s.length,e=.5,i=`<div class="has-slider">
      <input type="range" min="0" max="1" value="${e}" step="0.00001" oninput="copyNewInput(this, ${t})" />
      <code>support.input(${t})</code> =
      <span>${e.toString().padEnd(7,"0")}</span>
    </div>`;A.insertAdjacentHTML("beforeend",i),s.push(e)}window.addMoreInputs=(t,e)=>{for(t.disabled=!0;s.length<e;)h()};I("#inputsGroup button",HTMLButtonElement).addEventListener("click",()=>{h()});h();h();{const t=r("segmentCountInput",HTMLInputElement),e=()=>{E.clear();const u=`"use strict";
`+g.value+`
return { x, y };`;let p;try{p=new Function("t /* A value between 0 and 1, inclusive. */","support",u)}catch(n){if(n instanceof SyntaxError){E.displayError(n);return}else throw n}const m=n=>{const a=p(n,M);if(!(Number.isFinite(a.x)&&Number.isFinite(a.y)))throw new Error(`Invalid result.  Expected {x,y} where x and y are both finite numbers.  Found: ${JSON.stringify(a)} when t=${n}.`);return a};let b;try{b=T.parametric(m,t.valueAsNumber).rawPath}catch(n){if(n instanceof Error){E.displayError(n);return}else throw n}f.forEach(({path:n})=>n.setAttribute("d",b)),L.innerText=f[0].path.outerHTML,f.forEach(({svg:n,path:a})=>{const c=a.getBBox(),o=n.viewBox.baseVal;o.x=c.x,o.y=c.y,o.width=c.width,o.height=c.height,n.style.setProperty("--recommended-width",(Math.max(o.width,o.height)/100).toString())})};let i=!1;const l=()=>{d.disabled=!0,i||(i=!0,requestAnimationFrame(()=>{i=!1,e()}))};d.addEventListener("click",l);const v=r("segmentCountSpan",HTMLSpanElement),w=()=>{v.innerText=t.value.padStart(3,y.FIGURE_SPACE)};w(),t.addEventListener("input",()=>{w(),l()}),window.copyNewInput=(u,p)=>{s[p]=u.valueAsNumber;const m=y.assertClass(u.parentElement?.lastElementChild,HTMLSpanElement);m.innerText=u.value.padEnd(7,"0"),l()},l()}
