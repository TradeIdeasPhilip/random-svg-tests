import"./modulepreload-polyfill-B5Qt9EMX.js";import{g as o}from"./client-misc-1LRynplM.js";/* empty css              */import{P as L}from"./path-shape-BgXUztkR.js";import{s as g,b as S}from"./utility-2TZy30Cu.js";import{m}from"./misc-CLGTS8fC.js";const E=o("go",HTMLButtonElement),h=o("source",HTMLTextAreaElement),I=o("result",HTMLElement);h.addEventListener("input",()=>E.disabled=!1);class w{static#t=o("error",HTMLDivElement);static display(e){this.#t.innerText=e}static displayError(e){e instanceof v?this.#t.innerHTML=`Unable to access <code>support.input(${e.requestedIndex})</code>.  Only ${r.length} input sliders currently exist.  <button onclick="addMoreInputs(this,${e.requestedIndex+1})">Add More</button>`:this.display(e.message)}static clear(){this.display("")}}const y=g("[data-sample]",SVGSVGElement).map(t=>{const e=m.assertClass(t.firstElementChild,SVGPathElement);return{svg:t,path:e}}),r=[];class v extends Error{constructor(e){super(`Unable to access support.input(${e}).  Only ${r.length} input sliders currently exist.`),this.requestedIndex=e}}const M={input(t){if(!Number.isSafeInteger(t)||t<0)throw new RangeError(`invalid ${t}`);if(t>=r.length)throw new v(t);return r[t]}},H=o("inputs",HTMLDivElement);function f(){E.disabled=!1;const t=r.length,e=.5,u=`<div class="has-slider">
      <input type="range" min="0" max="1" value="${e}" step="0.00001" oninput="copyNewInput(this, ${t})" />
      <code>support.input(${t})</code> =
      <span>${e.toString().padEnd(7,"0")}</span>
    </div>`;H.insertAdjacentHTML("beforeend",u),r.push(e)}window.addMoreInputs=(t,e)=>{for(t.disabled=!0;r.length<e;)f()};S("#inputsGroup button",HTMLButtonElement).addEventListener("click",()=>{f()});f();f();{const t=o("segmentCountInput",HTMLInputElement),e=()=>{w.clear();const s=`"use strict";
`+h.value+`
return { x, y };`;let i;try{i=new Function("t /* A value between 0 and 1, inclusive. */","support",s)}catch(n){if(n instanceof SyntaxError){w.displayError(n);return}else throw n}const p=n=>{const a=i(n,M);if(!(Number.isFinite(a.x)&&Number.isFinite(a.y)))throw new Error(`Invalid result.  Expected {x,y} where x and y are both finite numbers.  Found: ${JSON.stringify(a)} when t=${n}.`);return a};let x;try{x=L.parametric(p,t.valueAsNumber).rawPath}catch(n){if(n instanceof Error){w.displayError(n);return}else throw n}y.forEach(({path:n})=>n.setAttribute("d",x)),I.innerText=y[0].path.outerHTML,y.forEach(({svg:n,path:a})=>{const d=a.getBBox(),l=n.viewBox.baseVal;l.x=d.x,l.y=d.y,l.width=d.width,l.height=d.height,n.style.setProperty("--recommended-width",(Math.max(l.width,l.height)/100).toString())})};let u=!1;const c=()=>{E.disabled=!0,u||(u=!0,requestAnimationFrame(()=>{u=!1,e()}))};E.addEventListener("click",c);const T=o("segmentCountSpan",HTMLSpanElement),b=()=>{T.innerText=t.value.padStart(3,m.FIGURE_SPACE)};b(),t.addEventListener("input",()=>{b(),c()}),window.copyNewInput=(s,i)=>{r[i]=s.valueAsNumber;const p=m.assertClass(s.parentElement?.lastElementChild,HTMLSpanElement);p.innerText=s.valueAsNumber.toFixed(5),c()},g("button.show-this",HTMLButtonElement).forEach(s=>{const i=m.assertClass(s.parentElement?.nextElementSibling,HTMLPreElement);s.addEventListener("click",()=>{const p=i.innerText;h.value=p,c(),h.scrollIntoView({behavior:"smooth"})})}),c()}
