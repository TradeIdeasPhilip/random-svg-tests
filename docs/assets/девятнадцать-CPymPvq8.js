import"./modulepreload-polyfill-B5Qt9EMX.js";import{g as c}from"./client-misc-1LRynplM.js";/* empty css              */import{t as E,P as b}from"./path-shape-C2966eRL.js";import{b as M,s as A}from"./utility-2TZy30Cu.js";import{m}from"./misc-CLGTS8fC.js";const g=c("go",HTMLButtonElement),T=c("source",HTMLTextAreaElement),D=c("result",HTMLElement);T.addEventListener("input",()=>g.disabled=!1);function y(e,t,n){const a=e.width/e.height,i=t.width/t.height;let o,s;n==="fit"?a>i?(o=t.width/e.width,s=o):(s=t.height/e.height,o=s):a>i?(s=t.height/e.height,o=s):(o=t.width/e.width,s=o);const r=-e.x*o+(t.width-e.width*o)/2+t.x,d=-e.y*s+(t.height-e.height*s)/2+t.y;return new DOMMatrix().translate(r,d).scale(o,s)}function I(){{const e={x:-1,y:-1,width:2,height:2},t={x:0,y:0,height:244,width:325},n=y(e,t,"fit");console.log("Test 1 (fit, square to wider):",{testFrom:e,testTo:t,testMatrix:n.toJSON()}),[{x:e.x,y:e.y},{x:e.x+e.width,y:e.y},{x:e.x+e.width,y:e.y+e.height},{x:e.x,y:e.y+e.height}].forEach(({x:i,y:o})=>{const s=E(i,o,n);if(console.log({xFrom:i,yFrom:o,toPoint:{x:s.x,y:s.y}}),s.x<t.x||s.x>t.x+t.width||s.y<t.y||s.y>t.y+t.height)throw new Error(`Test 1 failed: Point (${s.x}, ${s.y}) is outside destination (${t.x}, ${t.y}, ${t.width}, ${t.height})`)})}{const e={x:-1,y:-1,width:2,height:2},t={x:0,y:0,height:325,width:244},n=y(e,t,"fit");console.log("Test 2 (fit, square to taller):",{testFrom:e,testTo:t,testMatrix:n.toJSON()}),[{x:e.x,y:e.y},{x:e.x+e.width,y:e.y},{x:e.x+e.width,y:e.y+e.height},{x:e.x,y:e.y+e.height}].forEach(({x:i,y:o})=>{const s=E(i,o,n);if(console.log({xFrom:i,yFrom:o,toPoint:{x:s.x,y:s.y}}),s.x<t.x||s.x>t.x+t.width||s.y<t.y||s.y>t.y+t.height)throw new Error(`Test 2 failed: Point (${s.x}, ${s.y}) is outside destination (${t.x}, ${t.y}, ${t.width}, ${t.height})`)})}{const e={x:-1,y:-1,width:2,height:2},t={x:0,y:0,height:244,width:325},n=y(e,t,"fill");console.log("Test 3 (fill, square to wider):",{testFrom:e,testTo:t,testMatrix:n.toJSON()}),[{x:e.x,y:e.y},{x:e.x+e.width,y:e.y},{x:e.x+e.width,y:e.y+e.height},{x:e.x,y:e.y+e.height}].forEach(({x:i,y:o})=>{const s=E(i,o,n);console.log({xFrom:i,yFrom:o,toPoint:{x:s.x,y:s.y}})})}console.log("All tests passed!")}I();class S{static#t=c("error",HTMLDivElement);static display(t){this.#t.innerText=t}static displayError(t){t instanceof P?this.#t.innerHTML=`Unable to access <code>support.input(${t.requestedIndex})</code>.  Only ${u.length} input sliders currently exist.  <button onclick="addMoreInputs(this,${t.requestedIndex+1})">Add More</button>`:this.display(t.message)}static clear(){this.display("")}}class h{#t;get svgElement(){return this.#t}#e;get pathElement(){return this.#e}constructor(t){this.#t=M(t,SVGSVGElement),this.#e=m.assertClass(this.#t.firstElementChild,SVGPathElement),h.all.add(this)}static all=new Set;#s=NaN;get recommendedWidth(){return this.#s}#n(){const t=this.#e.getBBox(),n=this.#t.viewBox.baseVal;n.x=t.x,n.y=t.y,n.width=t.width,n.height=t.height,this.#s=Math.max(n.width,n.height)/100,this.#t.style.setProperty("--recommended-width",this.#s.toString())}setD(t){this.#e.setAttribute("d",t),this.#n()}static setD(t){this.all.forEach(n=>n.setD(t))}static getOuterHTML(){return m.pickAny(h.all).#e.outerHTML}deAnimate(){this.#e.getAnimations().forEach(t=>t.cancel())}}new h("#filledSample");new h("#outlineSample");class L extends h{constructor(){super("#chasingPathsSample")}setD(t){super.setD(t);const n=this.pathElement,a=1500,i=Date.now()/a%1;this.deAnimate();const o=n.getTotalLength();n.style.strokeDasharray=`0 ${o} ${o} 0`,n.animate([{strokeDashoffset:0},{strokeDashoffset:-2*o}],{iterations:1/0,duration:a,iterationStart:i})}}new L;class H extends h{constructor(){super("#dancingAntsSample")}setD(t){super.setD(t);const n=this.pathElement,a=250;this.deAnimate();const i=n.getTotalLength(),o=Date.now()/a%1,s=4*this.recommendedWidth,r=s*10<i?i/Math.round(i/s):s;n.style.strokeDasharray=`0 ${r}`,n.animate([{strokeDashoffset:0},{strokeDashoffset:-r}],{iterations:1/0,duration:a,iterationStart:o})}}new H;class N extends h{constructor(){super("#tauFollowingPathSample")}setD(t){super.setD(t),this.svgElement.style.setProperty("--css-path",b.cssifyPath(t))}}new N;new h("#textPathSample");class v{static#t=document.createElementNS("http://www.w3.org/2000/svg","svg");static#e=document.createElementNS("http://www.w3.org/2000/svg","path");static#s=c("clipPathSample",HTMLImageElement);static#n=!1;static#i(){if(!this.#n){document.body.append(this.#t),this.#t.append(this.#e);const t=this.#t.style;t.opacity="0",t.maxWidth="0",t.maxHeight="0",this.#s.decode().then(()=>this.doItSoon()),new ResizeObserver(()=>this.doItSoon()).observe(this.#s),this.#n=!0}}static doItSoon(){console.warn("placeholder")}static setPathShape(t){this.#i(),this.#e.setAttribute("d",t.rawPath);const n=this.#e.getBBox(),a=y(n,{x:0,y:0,height:this.#s.clientHeight,width:this.#s.clientWidth},"fit"),i=t.transform(a);this.#s.style.clipPath=i.cssPath}}const u=[];class P extends Error{constructor(t){super(`Unable to access support.input(${t}).  Only ${u.length} input sliders currently exist.`),this.requestedIndex=t}}const C={input(e){if(!Number.isSafeInteger(e)||e<0)throw new RangeError(`invalid ${e}`);if(e>=u.length)throw new P(e);return u[e]}},B=c("inputs",HTMLDivElement);function w(){g.disabled=!1;const e=u.length,t=.5,n=`<div class="has-slider">
      <input type="range" min="0" max="1" value="${t}" step="0.00001" oninput="copyNewInput(this, ${e})" />
      <code>support.input(${e})</code> =
      <span>${t.toString().padEnd(7,"0")}</span>
    </div>`;B.insertAdjacentHTML("beforeend",n),u.push(t)}window.addMoreInputs=(e,t)=>{for(e.disabled=!0;u.length<t;)w()};M("#inputsGroup button",HTMLButtonElement).addEventListener("click",()=>{w()});w();w();{const e=c("segmentCountInput",HTMLInputElement),t=c("inputsGroup",HTMLDivElement),n=()=>{S.clear();const r=`"use strict";
`+T.value+`
return { x, y };`;let d;try{d=new Function("t /* A value between 0 and 1, inclusive. */","support",r)}catch(l){if(l instanceof SyntaxError){S.displayError(l);return}else throw l}const p=l=>{const x=d(l,C);if(!(Number.isFinite(x.x)&&Number.isFinite(x.y)))throw new Error(`Invalid result.  Expected {x,y} where x and y are both finite numbers.  Found: ${JSON.stringify(x)} when t=${l}.`);return x};let f;try{f=b.parametric(p,e.valueAsNumber)}catch(l){if(l instanceof Error){S.displayError(l);return}else throw l}const $=f.rawPath;h.setD($),v.setPathShape(f),D.innerText=h.getOuterHTML()};let a=!1;const i=()=>{g.disabled=!0,a||(a=!0,requestAnimationFrame(()=>{a=!1,n()}))};v.doItSoon=i,g.addEventListener("click",i);const o=c("segmentCountSpan",HTMLSpanElement),s=()=>{o.innerText=e.value.padStart(3,m.FIGURE_SPACE)};s(),e.addEventListener("input",()=>{s(),i()}),window.copyNewInput=(r,d)=>{u[d]=r.valueAsNumber;const p=m.assertClass(r.parentElement?.lastElementChild,HTMLSpanElement);p.innerText=r.valueAsNumber.toFixed(5),i()},A("button.show-this",HTMLButtonElement).forEach(r=>{const d=m.assertClass(r.parentElement?.nextElementSibling,HTMLPreElement);r.addEventListener("click",()=>{const p=d.innerText;T.value=p,i(),t.scrollIntoView({behavior:"smooth"})})}),i()}
